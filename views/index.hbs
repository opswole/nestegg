<hgroup>
<h1>Hello NestEgg,</h1>
<p>This site is essentially to act as a cover letter in support of my application for the <i>Graduate Backend Programmer</i> listed on Gradcracker.</p>
</hgroup>

{{#each sections}}
    <details>
        <summary>{{name}}</summary>
        {{{content}}}
    </details>
    <hr />
{{/each}}

<details name="infrastructure">
    <summary>Infrastructure of this site</summary>
    <p>This site is Express/Handlebars, deployed on an EC2 with the data being loaded via a Postgres RDS instance. Typically, I'd build a site like this using something like Astro due to the text-heavy nature and native MD support, however, this small site made a good reason to expose myself to managed AWS databases.  </p>
    <div class="grid">
        <div>
            <h4>EC2</h4>
            <div id="ec2-instances">Loading</div>
        </div>

        <div>
            <h4>RDS</h4>
            <div id="rds-instances">Loading</div>
        </div>
    </div>

    <div id="last-updated">
        Last updated: <span id="last-updated-time">-</span>
    </div>
</details>

<hr />

<script>
    // This code was generated by an LLM
    async function loadAWSStats() {
        try {
            const response = await fetch('/aws-stats');
            const data = await response.json();

            // Display EC2 instances
            const ec2Container = document.getElementById('ec2-instances');
            if (data.ec2.instances.length === 0) {
                ec2Container.innerHTML = '<p>No EC2 instances found</p>';
            } else {
                ec2Container.innerHTML = data.ec2.instances.map(instance => `
                <div class="instance-card">
                    <div class="instance-header">
                        <strong>${instance.name}</strong>
                        <span class="status status-${instance.state}">${instance.state}</span>
                    </div>
                    <div class="instance-details">
                        <p><strong>ID:</strong> ${instance.id}</p>
                        <p><strong>Type:</strong> ${instance.type}</p>
                        <p><strong>Public IP:</strong> ${instance.publicIp}</p>
                        <p><strong>Private IP:</strong> ${instance.privateIp}</p>
                        <p><strong>Platform:</strong> ${instance.platform}</p>
                        <p><strong>Launched:</strong> ${new Date(instance.launchTime).toLocaleString()}</p>
                    </div>
                </div>
            `).join('');
            }

            // Display RDS instances
            const rdsContainer = document.getElementById('rds-instances');
            if (data.rds.instances.length === 0) {
                rdsContainer.innerHTML = '<p>No RDS instances found</p>';
            } else {
                rdsContainer.innerHTML = data.rds.instances.map(db => `
                <div class="instance-card">
                    <div class="instance-header">
                        <strong>${db.id}</strong>
                        <span class="status status-${db.status.toLowerCase()}">${db.status}</span>
                    </div>
                    <div class="instance-details">
                        <p><strong>Database:</strong> ${db.name}</p>
                        <p><strong>Engine:</strong> ${db.engine} ${db.version}</p>
                        <p><strong>Instance Class:</strong> ${db.instanceClass}</p>
                        <p><strong>Endpoint:</strong> ${db.endpoint}:${db.port}</p>
                        <p><strong>Storage:</strong> ${db.storage} GB</p>
                        <p><strong>Multi-AZ:</strong> ${db.multiAZ ? 'Yes' : 'No'}</p>
                        <p><strong>Public Access:</strong> ${db.publicAccess ? 'Yes' : 'No'}</p>
                        <p><strong>Created:</strong> ${new Date(db.createdTime).toLocaleString()}</p>
                    </div>
                </div>
            `).join('');
            }

            // Update timestamp
            document.getElementById('last-updated-time').textContent =
                    new Date(data.lastUpdated).toLocaleString();

        } catch (error) {
            console.error('Failed to fetch AWS stats:', error);
            document.getElementById('ec2-instances').innerHTML = '<p class="error">Failed to load EC2 data</p>';
            document.getElementById('rds-instances').innerHTML = '<p class="error">Failed to load RDS data</p>';
        }
    }

    loadAWSStats();
    setInterval(loadAWSStats, 120000);
</script>




